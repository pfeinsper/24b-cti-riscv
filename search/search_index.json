{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About this project","text":"<p>Yet to be written, if you are a dev from the team in need for some help, go to the Getting Started page.</p>"},{"location":"getting-started/development/","title":"\u00fatil para o desenvolvimento.","text":""},{"location":"getting-started/development/#manuais-relevantes","title":"Manuais relevantes:","text":"<ul> <li>Datasheet do NEORV32</li> <li>Guia do NEORV32</li> <li>Manual De0-Nano</li> </ul>"},{"location":"getting-started/development/#como-abrir-e-compilar-codigo-c-para-o-risc-v","title":"Como abrir e compilar c\u00f3digo C para o RISC-V","text":"<ol> <li>Abra o projeto no Visual Studio Code.</li> <li>Aceite a proposta de abrir o projeto no container.</li> <li>Abra o terminal do Visual Studio Code.</li> <li>V\u00e1 para a pasta de exemplos dentro de sw e escolha um exemplo.</li> <li>Compile o c\u00f3digo C com o comando <code>make clean_all exe</code>.</li> </ol> <p>Estas etapas gerar\u00e3o um arquivo bin\u00e1rio que pode ser carregado no RISC-V.</p>"},{"location":"getting-started/development/#como-carregar-o-software-no-risc-v","title":"Como carregar o software no RISC-V","text":"<p>Para carregar o software no RISC-V, siga estes passos:</p> <ol> <li>garanta que voc\u00ea tem um adaptador USB-Serial conectado ao FPGA (use o qsf na pasta de hw para giar a pinagem).</li> <li>Garanta que o NEORV32 est\u00e1 na FPGA atrav\u00e9s do Quartus Prime. (lembre que vco\u00ea pode abrir o Quartus Prime digitando <code>quartus</code> no terminal do Visual Studio Code).</li> <li>Estabele\u00e7a a comunica\u00e7\u00e3o com o FPGA atrav\u00e9s do adaptador USB-Serial, seguindo os passos descritos no Guia do NEORV32 e fa\u00e7a o upload do arquivo bin\u00e1rio gerado na etapa anterior.</li> </ol>"},{"location":"getting-started/hardware/","title":"Hardware","text":"<p>Se vc quer saber como executar c\u00f3digos C no RISC-V, voc\u00ea est\u00e1 no lugar errado. Aqui vamos falar sobre o hardware do projeto. (v\u00e1 para Development para saber mais sobre o software).</p>"},{"location":"getting-started/overview/","title":"Project Structure","text":"<p>Ok, vamos escrever isso em portugu\u00eas por enquanto, por valoriza\u00e7\u00e3o da agiidade.</p> <p>Este projeto \u00e9 organizado em tr\u00eas pastas principais (ignore as outras por enquanto):</p> <ul> <li>.devcontainer: Configura\u00e7\u00f5es do Visual Studio Code para o ambiente de desenvolvimento.</li> <li>acionamento_brushless: C\u00f3digo fonte do firmware do acionamento brushless.</li> <li>de0-nano-sdeam-qsys: Projeto do Quartus Prime para o FPGA DE0-Nano-SoC e tamb\u00e9m o c\u00f3digo fonte do firmware do FPGA.   </li> </ul>"},{"location":"getting-started/overview/#devcontainer","title":".devcontainer","text":"<p>Se voc\u00ea \u00e9 do time de desenvolvemento e quer ser capaz de compilar os c\u00f3digos C para o RISC-V esse \u00e9 o seu principal companheiro. Aqui voc\u00ea encontra as configura\u00e7\u00f5es do Visual Studio Code para o ambiente de desenvolvimento.</p> <p>Assim que voc\u00ea abrir o projeto no Visual Studio Code, ele vai te perguntar se voc\u00ea quer abrir o projeto no container. Aceite e ele vai montar um ambiente de desenvolvimento com todas as ferramentas necess\u00e1rias para compilar o c\u00f3digo C para o RISC-V.</p> <p>O devcontainer cont\u00e9m a toolchain do RISC-V e o Quartus. Ent\u00e3o, se voc\u00ea quiser compilar o c\u00f3digo C para o RISC-V ou programar o FPGA, voc\u00ea deve fazer isso dentro do container.</p> <p>Para abrir o Quartus, voc\u00ea pode abrir o terminal do Visual Studio Code e digitar <code>quartus</code> para abrir o Quartus.</p>"},{"location":"getting-started/overview/#acionamento_brushless","title":"acionamento_brushless","text":"<p>Eu n\u00e3o sei muito dessa parte, vamos ageitar isso depois.</p>"},{"location":"getting-started/overview/#de0-nano-sdeam-qsys","title":"de0-nano-sdeam-qsys","text":"<p>Esta pasta possui outras duas subpastas:</p> <ul> <li>hw: Projeto do Quartus Prime para o FPGA DE0-Nano-SoC.</li> <li>sw: C\u00f3digo fonte do firmware do FPGA.</li> </ul> <p>Os arquivos da pasta hw que s\u00e3o mais importantes para o desenvolvimento s\u00e3o:</p> <ul> <li>de0-nano-soc.qpf: Arquivo de projeto do Quartus Prime. (use este arquivo para abrir o projeto no Quartus Prime)</li> <li>de0-nano-soc.qsf: Arquivo de configura\u00e7\u00e3o do projeto. (\u00e9 onde est\u00e3o as configura\u00e7\u00f5es de pinagem, use este arquivo sempre que precisar fazer uma montagem de pinos)</li> <li>src/top.vhd: Arquivo de descri\u00e7\u00e3o do hardware do FPGA. (no inicio e no final do arquivo est\u00e3o configurados os sinais mais importantes, ent\u00e3o \u00e9 onde a sua d\u00favida provavelmente ser\u00e1 respondida).</li> </ul> <p>Dentro da pasta sw, vco\u00ea encontrar\u00e1 mais duas pastas principais (ignore as outras por enquanto):</p> <ul> <li>example: S\u00e3o os c\u00f3digos C do projeto (se baseie no golden_top para entender como o c\u00f3digo C se comunica com o hardware).</li> <li>lib: Bibliotecas de suporte para o projeto.</li> </ul>"},{"location":"getting-started/software/","title":"Software","text":"<p>Se vc quer saber como executar c\u00f3digos C no RISC-V, voc\u00ea est\u00e1 no lugar errado. Aqui vamos falar sobre o hardware do projeto. (v\u00e1 para Development para saber mais sobre o software).</p>"}]}